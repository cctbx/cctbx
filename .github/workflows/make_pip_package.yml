# Convert conda package to pip package
name: Convert conda to pip
on:
  workflow_dispatch:
  schedule:
    - cron: '0 7 * * *'

jobs:
  convert_conda_packages:

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, ubuntu-24.04-arm, macos-15, macos-13, windows-latest]
        python_version: [3.9, "3.10", 3.11, 3.12, 3.13, 3.14]
        include:
          - os: ubuntu-24.04
            image: quay.io/pypa/manylinux_2_28_x86_64
          - os: ubuntu-24.04-arm
            image: quay.io/pypa/manylinux_2_28_aarch64
          - os: macos-15
            image: ''
          - os: macos-13
            image: ''
          - os: windows-latest
            image: ''

    name: Converting (${{ matrix.os }}, Python ${{ matrix.python_version }})
    runs-on: ${{ matrix.os }}
    container:
      image: ${{ matrix.image }}

    steps:
  #     - name: Install dependencies
  #       run: yum install curl tar xz

  #     # https://github.com/actions/checkout/issues/1474
  #     # https://github.com/microsoft/git/pull/719/files#diff-6adb0caabcb504c4b5623b1b5b506967e640f0eabd4dd8f72e5a03e956b5d1feR497-R499
  #     # Actions use javascript, may need to replace action in the future
  #     # - name: Replace node20 (linux x86-64)
  #     #   if: ${{ runner.os == 'Linux' && runner.arch == 'x64' }}
  #     #   run: |
  #     #     node_tarball=node-v17.9.1-linux-x64.tar.xz

  #     #     curl -Lo /tmp/node.tar.xz https://nodejs.org/dist/v17.9.1/${node_tarball}
  #     #     tar -C /tmp/externals/node20 -x --strip-components=1 -f /tmp/node.tar.xz

  #     # - name: Replace node20 (linux arm64)
  #     #   if: ${{ runner.os == 'Linux' && runner.arch != 'x64' }}
  #     #   run: |
  #     #     node_tarball=node-v17.9.1-linux-arm64.tar.xz

  #     #     curl -Lo /tmp/node.tar.xz https://nodejs.org/dist/v17.9.1/${node_tarball}
  #     #     tar -C /tmp/externals/node20 -x --strip-components=1 -f /tmp/node.tar.xz

      - uses: actions/checkout@v4
        with:
          path: cctbx

      - uses: conda-incubator/setup-miniconda@v3
        with:
          conda-remove-defaults: true
          miniforge-version: latest
          python-version: ${{ matrix.python_version }}

      - name: Base environment info
        run: |
          conda info
          conda list

      - name: Install cctbx (cctbx-nightly)
        if: ${{ github.ref_name != 'release' }}
        run: |
          conda install -n test -c cctbx-nightly -y cctbx-base python=${{ matrix.python_version }}

      - name: Install cctbx (conda-forge)
        if: github.ref_name == 'release'
        run: |
          conda install -n test -c conda-forge -y cctbx-base python=${{ matrix.python_version }}

      - name: Test environment info
        run: |
          conda list -n test

      # Linux and macOS path
      - name: Create unix package (Linux & macOS)
        if: runner.os != 'Windows'
        run: |
          source ${CONDA}/etc/profile.d/conda.sh
          conda activate test

          cd cctbx/wheel

          version=`cat ${CONDA_PREFIX}/share/cctbx/cctbx_version.txt`
          python update_version.py --version=${version}

          rm -f ${HOME}/conda_pkgs_dir/cctbx-base*.conda

          python convert.py --conda-package-path ${HOME}/conda_pkgs_dir/cctbx-base*

          cat pyproject.toml

          ls

      - name: Build unix wheel (Linux & macOS)
        if: runner.os != 'Windows'
        run: |
          source ${CONDA}/etc/profile.d/conda.sh
          conda activate test

          cd cctbx/wheel

          pip wheel . -w ./wheels

          ls wheels

      - name: Fix unix wheel (Linux & macOS)
        if: runner.os != 'Windows'
        run: |
          source ${CONDA}/etc/profile.d/conda.sh
          conda activate test

          cd cctbx/wheel

          if [[ "`uname`" == "Darwin" ]]; then
            conda install -y delocate
            DYLD_LIBRARY_PATH=${CONDA_PREFIX}/lib delocate-wheel -w fixed_wheels -v ./wheels/cctbx?base*.whl
            ls fixed_wheels
          else
            conda install -y auditwheel
            AUDITWHEEL_DIR=`python -c "import auditwheel; from pathlib import Path; print(Path(auditwheel.__file__).parent)"`
            cp ./manylinux-policy.json ${AUDITWHEEL_DIR}/policy/manylinux-policy.json
            export LD_LIBRARY_PATH=${CONDA_PREFIX}/lib
            auditwheel repair -w fixed_wheels ./wheels/cctbx?base*.whl
            ls fixed_wheels
          fi

      # Windows path
      - name: Create Windows package
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          call %CONDA%\Scripts\activate test
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64

          cd cctbx\wheel

          set /p version=<"%CONDA_PREFIX%\Library\share\cctbx\cctbx_version.txt"
          python update_version.py --version=%version%
          if %ERRORLEVEL% neq 0 exit 1

          del /s /q %USERPROFILE%\conda_pkgs_dir\cctbx-base*.conda

          for /D %%d in ("%USERPROFILE%\conda_pkgs_dir\cctbx-base*") do (
            echo %%d
            python convert.py --conda-package-path %%d
            if %ERRORLEVEL% neq 0 exit 1
          )

          more pyproject.toml

          dir

      - name: Build Windows wheel
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          call %CONDA%\Scripts\activate test
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64

          cd cctbx\wheel

          pip wheel . -w .\wheels
          if %ERRORLEVEL% neq 0 exit 1

          dir wheels

      - name: Fix Windows wheel
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          call %CONDA%\Scripts\activate test
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64

          cd cctbx\wheel

          call conda install -y delvewheel

          for %%f in (".\wheels\cctbx?base*.whl") do (
            echo %%f
            delvewheel repair -v -w fixed_wheels %%f
            if %ERRORLEVEL% neq 0 exit 1
          )

          dir fixed_wheels

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}_${{ matrix.python_version }}
          path: ./cctbx/wheel/fixed_wheels/cctbx?base*.whl
          overwrite: true

  test_pip_packages:
    needs: convert_conda_packages

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, ubuntu-24.04-arm, macos-15, macos-13, windows-latest]
        python_version: [3.9, "3.10", 3.11, 3.12, 3.13, 3.14]
        include:
          - os: ubuntu-24.04
            image: quay.io/pypa/manylinux_2_28_x86_64
          - os: ubuntu-24.04-arm
            image: quay.io/pypa/manylinux_2_28_aarch64
          - os: macos-15
            image: ''
          - os: macos-13
            image: ''
          - os: windows-latest
            image: ''

    name: Testing (${{ matrix.os }}, Python ${{ matrix.python_version }})
    runs-on: ${{ matrix.os }}
    container:
      image: ${{ matrix.image }}

    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python_version }}

      - uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.os }}_${{ matrix.python_version }}

      - name: Install pip package (Linux & macOS)
        if: runner.os != 'Windows'
        run: pip install -vvv cctbx*.whl

      - name: Install pip package (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          for %%f in (".\cctbx*.whl") do (
            pip install -vvv %%f
          )

      - name: Debug (Linux & macOS)
        if: runner.os != 'Windows'
        run: |
          dispatchers_dir=`python -c "import libtbx.core.dispatchers; from pathlib import Path; print(Path(libtbx.core.dispatchers.__file__).parent)"`
          ls $dispatchers_dir
          more $dispatchers_dir/cctbx_lattice_symmetry.py
          libtbx.python --version

      - name: Debug (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          python -m site
          python -c "import libtbx; from pathlib import Path; print(Path(libtbx.__file__).parent.parent)" > sp_dir.txt
          set /p sp_dir=<".\sp_dir.txt"
          more %sp_dir%\libtbx\core\dispatchers\libtbx.run_tests_parallel.bat
          more %sp_dir%\libtbx\core\dispatchers\libtbx_run_tests_parallel.py
          more %sp_dir%\libtbx\core\dispatchers\libtbx.python.bat
          more %sp_dir%\libtbx\core\dispatchers\libtbx_python.py
          more %sp_dir%\libtbx\core\dispatchers\iotbx.fetch_pdb.bat
          more %sp_dir%\libtbx\core\dispatchers\iotbx_fetch_pdb.py
          python -c "from importlib.metadata import entry_points; eps = entry_points(); cs = eps['console_scripts']; print(cs)"
          python -c "import sysconfig; print(sysconfig.get_path('scripts'))" > script_dir.txt
          set /p script_dir=<".\script_dir.txt"
          dir %script_dir%

          REM Windows does not create *.python.exe console scripts for some reason
          REM *.exe are created instead
          REM hack to enable testing
          libtbx --version
          move %script_dir%\libtbx.exe %script_dir%\libtbx.python.exe
          move %script_dir%\scitbx.exe %script_dir%\scitbx.python.exe
          libtbx.python --version

      - name: Test dispatcher
        run: iotbx.fetch_pdb

      - name: Test binary entry point
        run: cctbx.find_distances

      - name: Test (Linux & macOS)
        if: runner.os != 'Windows'
        run: |
          mkdir test
          cd test
          libtbx.run_tests_parallel \
            module=cctbx \
            module=libtbx \
            module=scitbx \
            module=smtbx \
            nproc=4

      - name: Test (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          mkdir test
          cd test
          libtbx.run_tests_parallel ^
            module=cctbx ^
            module=libtbx ^
            module=scitbx ^
            module=smtbx ^
            nproc=4

  publish-to-testpypi:
    if: ${{ github.repository == 'cctbx/cctbx' && github.ref_name == 'master' }}
    name: Publish Python 🐍 distribution 📦 to TestPyPI
    needs: test_pip_packages
    runs-on: ubuntu-latest

    environment:
      name: testing
      url: https://test.pypi.org/p/cctbx-base

    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        path: wheels/

    - name: Move wheels to dist
      run: |
        mkdir dist
        ls
        ls wheels/*
        mv wheels/*/*.whl ./dist
        ls dist

    - name: Publish distribution 📦 to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        skip-existing: true
        verbose: true

  publish-to-pypi:
    if: ${{ github.repository == 'cctbx/cctbx' && github.ref_name == 'release' }}
    name: Publish Python 🐍 distribution 📦 to PyPI
    needs: test_pip_packages
    runs-on: ubuntu-latest

    environment:
      name: release
      url: https://pypi.org/p/cctbx-base

    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        path: wheels/

    - name: Move wheels to dist
      run: |
        mkdir dist
        ls
        ls wheels/*
        mv wheels/*/*.whl ./dist
        ls dist

    - name: Publish distribution 📦 to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        skip-existing: true
        verbose: true
