# Convert conda package to pip package
name: Convert conda to pip
on:
  workflow_dispatch:
  schedule:
    - cron: '0 7 * * *'

jobs:
  convert_conda_packages:

    strategy:
      fail-fast: false
      matrix:
        channel: [cctbx-nightly]
        os: [ubuntu-latest, ubuntu-24.04-arm, macos-15, macos-13, windows-latest]
        python_version: [3.9, "3.10", 3.11, 3.12, 3.13]

    name: Converting (${{ matrix.channel }}, ${{ matrix.os }}, Python ${{ matrix.python_version }})
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          path: cctbx

      - uses: conda-incubator/setup-miniconda@v3
        with:
          activate-environment: test
          miniforge-version: latest
          python-version: ${{ matrix.python_version }}

      - name: Base environment info
        run: |
          conda info
          conda list

      - name: Install cctbx
        run: |
          conda install -n test -c ${{ matrix.channel }} -y cctbx-base

      - name: Test environment info
        run: |
          conda list -n test

      # Linux and macOS path
      - name: Create unix package (Linux & macOS)
        if: runner.os != 'Windows'
        run: |
          source ${CONDA}/etc/profile.d/conda.sh
          conda activate test

          cd cctbx/wheel

          version=`cat ${CONDA_PREFIX}/share/cctbx/cctbx_version.txt`
          python update_version.py --version=${version}

          rm -f ${HOME}/conda_pkgs_dir/cctbx-base*.conda

          python convert.py --conda-package-path ${HOME}/conda_pkgs_dir/cctbx-base*

          ls

      - name: Build unix wheel (Linux & macOS)
        if: runner.os != 'Windows'
        run: |
          source ${CONDA}/etc/profile.d/conda.sh
          conda activate test

          cd cctbx/wheel

          pip wheel . -w ./wheels

          ls wheels

      - name: Fix unix wheel (Linux & macOS)
        if: runner.os != 'Windows'
        run: |
          source ${CONDA}/etc/profile.d/conda.sh
          conda activate test

          cd cctbx/wheel

          if [[ "`uname`" == "Darwin" ]]; then
            conda install -y delocate
            delocate-wheel -w fixed_wheels -v ./wheels/cctbx?base*.whl -e libtbx/core/share/cctbx
            ls fixed_wheels
          else
            conda install -y auditwheel
            export LD_LIBRARY_PATH=${CONDA_PREFIX}/lib
            auditwheel repair -w fixed_wheels ./wheels/cctbx?base*.whl
            ls fixed_wheels
          fi

      # Windows path
      - name: Create Windows package
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          call %CONDA%\Scripts\activate test
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64

          cd cctbx\wheel

          set /p version=<"%CONDA_PREFIX%\Library\share\cctbx\cctbx_version.txt"
          python update_version.py --version=%version%
          if %ERRORLEVEL% neq 0 exit 1

          more pyproject.toml

          del /s /q %USERPROFILE%\conda_pkgs_dir\cctbx-base*.conda

          for /D %%d in ("%USERPROFILE%\conda_pkgs_dir\cctbx-base*") do (
            echo %%d
            python convert.py --conda-package-path %%d
            if %ERRORLEVEL% neq 0 exit 1
          )

          dir

      - name: Build Windows wheel
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          call %CONDA%\Scripts\activate test
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64

          cd cctbx\wheel

          pip wheel . -w .\wheels
          if %ERRORLEVEL% neq 0 exit 1

          dir wheels

      - name: Fix Windows wheel
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          call %CONDA%\Scripts\activate test
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64

          cd cctbx\wheel

          call conda install -y delvewheel

          for %%f in (".\wheels\cctbx?base*.whl") do (
            echo %%f
            delvewheel repair -v -w fixed_wheels %%f
            if %ERRORLEVEL% neq 0 exit 1
          )

          dir fixed_wheels

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}_${{ matrix.python_version }}
          path: ./cctbx/wheel/fixed_wheels/cctbx?base*.whl
          overwrite: true

  test_pip_packages:
    needs: convert_conda_packages

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-24.04-arm, macos-15, macos-13, windows-latest]
        python_version: [3.9, "3.10", 3.11, 3.12, 3.13]

    name: Testing (${{ matrix.os }}, Python ${{ matrix.python_version }})
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python_version }}

      - uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.os }}_${{ matrix.python_version }}

      - name: Install pip package (Linux & macOS)
        if: runner.os != 'Windows'
        run: pip install cctbx*.whl

      - name: Install pip package (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          for %%f in (".\cctbx*.whl") do (
            pip install %%f
          )

      - name: Test (Linux & macOS)
        if: runner.os != 'Windows'
        run: |
          mkdir test
          cd test
          libtbx.run_tests_parallel module=cctbx module=libtbx nproc=4

      - name: Test (Windows)
        if: runner.os == 'Windows'
        run: python -c "from scitbx.array_family import flex; d = flex.random_double(500); print(flex.mean(d))"
