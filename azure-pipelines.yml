# Build cctbx source tarball

trigger:
  branches:
    exclude:
      - nightly

jobs:
- job: Build_cctbx_source_tarball
  pool:
    vmImage: ubuntu-latest
  timeoutInMinutes: 120

  # variables for version
  variables:
    year: $(Get-Date -Format yyyy)
    month: $(Get-Date -Format MM)
    day: $(Get-Date -Format dd)
    version: $(year).$(month)a$(day)

  steps:

  # ubuntu setup
  - script: |
      sudo apt-get install -y build-essential curl git libgl1-mesa-dev libglu1-mesa-dev locales subversion
      sudo locale-gen en_US.UTF-8
      sudo update-locale
    displayName: Install dependencies for Ubuntu

  # set version
  - powershell: |
      $trimmed_month = $(month).TrimStart("0")
      $trimmed_day = $(day).TrimStart("0")
      Write-Host $trimmed_month
      Write-Host $trimmed_day
      Write-Host "##vso[task.setVariable variable=year]$(year)"
      Write-Host "##vso[task.setVariable variable=month]$trimmed_month"
      Write-Host "##vso[task.setVariable variable=day]$trimmed_day"
      Write-Host $(year)
      Write-Host $(month)
      Write-Host $(day)
    displayName: Set variables from date

  - script: |
      version=$(year).$(month)a$(day)
      echo "##vso[task.setVariable variable=version]$version"
      echo $(version)
    displayName: Set version

  - script: |
      set -xe
      release=`echo $(Build.SourceBranch) | sed 's/refs\/heads\/releases\///'`
      echo "##vso[task.setVariable variable=version]$release"
      echo $(version)
    displayName: Override version for release branch
    condition: startswith(variables['Build.SourceBranch'], 'refs/heads/releases/')

  # download sources
  - checkout: self
    submodules: recursive

  # add conda to path
  # https://docs.microsoft.com/en-us/azure/devops/pipelines/ecosystems/anaconda?view=azure-devops&tabs=ubuntu-16-04#add-conda-to-your-system-path
  - bash: echo "##vso[task.prependpath]$CONDA/bin"
    displayName: Add conda to PATH

  - script: |
      set -xe
      if [ -d /usr/share/miniconda/envs/test ]; then
        conda remove -n test -y --all
      fi
      conda create -n test -y requests
      source activate test
      cd modules
      python ../scripts/download-azure-artifact.py \
        --organization cctbx \
        --project cctbx_project \
        --definitions 4 \
        --artifact-name phenix_regression \
        --local-filename phenix_regression.zip
      unzip phenix_regression.zip
    displayName: Copy phenix_regression artifact
    retryCountOnTaskFailure: 3

  # link bootstrap.py
  - script: |
      set -xe
      ln -s modules/cctbx_project/libtbx/auto_build/bootstrap.py
    displayName: Link bootstrap.py

  # base and build
  - script: |
      set -xe
      python bootstrap.py base build \
        --builder=cctbx \
        --use-conda \
        --python 39 \
        --config-flags="--cxxstd=c++14" \
        --nproc=4
      cd build
      source setpaths.sh
      libtbx.configure cma_es fable rstbx spotfinder cbflib_adaptbx phenix_regression phenix_examples
      libtbx.scons -j 4
      libtbx.scons -j 4
    displayName: Configure and Build

  - script: |
      set -xe
      cd build
      source setpaths.sh
      libtbx.python -m pip install junit-xml
    displayName: Install junit-xml

  # test
  - script: |
      set -xe
      source ./build/setpaths.sh
      mkdir tests
      cd tests
      export PYTHONDEVMODE=1
      export PYTHONTRACEMALLOC=3
      libtbx.run_tests_parallel \
        module=annlib_adaptbx \
        module=boost_adaptbx \
        module=cbflib_adaptbx \
        module=cctbx \
        module=cctbx_website \
        module=cma_es \
        module=fable \
        module=gltbx \
        module=iotbx \
        module=libtbx \
        module=rstbx \
        module=scitbx \
        module=smtbx \
        module=spotfinder \
        nproc=4
    failOnStderr: false
    continueOnError: true
    displayName: Test

  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: './tests/output.xml'

  # build source tarball
  - script: |
      build/bin/libtbx.create_installer \
        --version $(version) \
        --install_script modules/cctbx_project/libtbx/auto_build/plus_installer.py \
        --dist_dir dist/$(version) \
        tmp/cctbx-$(version)
    displayName: Build source tarball

  # publish source tarball as artifact
  - publish: ./dist/$(version)/cctbx-$(version).tar.gz
    artifact: cctbx-$(version)
